;; -*- mode: emacs-lisp -*-
(("<?php" . php-php-tag)
 ("\n\n")
 ("// " . font-lock-comment-delimiter-face)
 ("Array should be treated like a normal keyword\n" . font-lock-comment-face)
 ("$" . php-variable-sigil)
 ("test" . php-variable-name)
 (" = ")
 ("array" . php-keyword)
 ("();\n\n")
 ("$" . php-variable-sigil)
 ("test" . php-variable-name)
 (" = ")
 ("function" . php-keyword)
 ("(")
 ("$" . php-variable-sigil)
 ("test" . php-variable-name)
 (" = ")
 ("array" . php-keyword)
 ("()) {\n};\n\n")
 ("// " . font-lock-comment-delimiter-face)
 ("Array should be treated as a type instead of a keyword in the following situations:\n" . font-lock-comment-face)
 ("// " . font-lock-comment-delimiter-face)
 ("- cast, should look like `(int)`\n" . font-lock-comment-face)
 ("// " . font-lock-comment-delimiter-face)
 ("- type hint, should look like `int $var`\n" . font-lock-comment-face)
 ("// " . font-lock-comment-delimiter-face)
 ("- return type, should look like `: int`\n" . font-lock-comment-face)
 ("$" . php-variable-sigil)
 ("test" . php-variable-name)
 (" = (")
 ("array" . font-lock-type-face)
 (")")
 ("$" . php-variable-sigil)
 ("test" . php-variable-name)
 (";\n\n")
 ("$" . php-variable-sigil)
 ("test" . php-variable-name)
 (" = ")
 ("function" . php-keyword)
 ("(")
 ("array" . font-lock-type-face)
 (" ")
 ("$" . php-variable-sigil)
 ("byValue" . php-variable-name)
 (", ")
 ("array" . font-lock-type-face)
 (" &")
 ("$" . php-variable-sigil)
 ("byReference" . php-variable-name)
 ("): ")
 ("array" . font-lock-type-face)
 (" {\n};\n"))
